/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Mon Aug 12 12:03:55 2019. */

#ifndef PB_RECORD_PB_H_INCLUDED
#define PB_RECORD_PB_H_INCLUDED
#include <pb.h>

#include "Controller.pb.h"

#include "XpressHw.pb.h"

#include "Recipe.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PreambleConstants {
    PreambleConstants_PREAMBLE_NONE = 0,
    PreambleConstants_PREAMBLE_HIGH = 233495534,
    PreambleConstants_PREAMBLE_LOW = 195816101
} PreambleConstants;
#define _PreambleConstants_MIN PreambleConstants_PREAMBLE_NONE
#define _PreambleConstants_MAX PreambleConstants_PREAMBLE_LOW
#define _PreambleConstants_ARRAYSIZE ((PreambleConstants)(PreambleConstants_PREAMBLE_LOW+1))

typedef enum _LOG_LEVEL {
    LOG_LEVEL_DEBUG = 0,
    LOG_LEVEL_INFO = 1,
    LOG_LEVEL_WARNING = 2,
    LOG_LEVEL_ERROR = 3
} LOG_LEVEL;
#define _LOG_LEVEL_MIN LOG_LEVEL_DEBUG
#define _LOG_LEVEL_MAX LOG_LEVEL_ERROR
#define _LOG_LEVEL_ARRAYSIZE ((LOG_LEVEL)(LOG_LEVEL_ERROR+1))

typedef enum _ControllerCommand {
    ControllerCommand_CMD_INVALID = 0,
    ControllerCommand_CMD_REPORT_VERSION = 1,
    ControllerCommand_CMD_REPORT_STATUS = 2,
    ControllerCommand_CMD_UPDATE_RECIPE = 3,
    ControllerCommand_CMD_LOAD_APP = 4,
    ControllerCommand_CMD_SAVE_RECIPE = 5,
    ControllerCommand_CMD_SET_TIME = 6,
    ControllerCommand_CMD_EXEC_INSTRUCTION = 7,
    ControllerCommand_CMD_EXEC_RECIPE = 8,
    ControllerCommand_CMD_KICK_CONTROLLER = 9,
    ControllerCommand_CMD_UPDATE_TEST_CONTROL = 10,
    ControllerCommand_CMD_CANCEL_RECIPE = 14,
    ControllerCommand_CMD_PAUSE_RECIPE = 15,
    ControllerCommand_CMD_STEP_RECIPE = 16,
    ControllerCommand_CMD_RESUME_RECIPE = 17,
    ControllerCommand_CMD_SET_GROUNDS_BIN_BYPASS = 18,
    ControllerCommand_CMD_CLEAR_GROUNDS_BIN_BYPASS = 19,
    ControllerCommand_CMD_START_UPDATE_APP = 20,
    ControllerCommand_CMD_WRITE_UPDATE_CHUNK = 21,
    ControllerCommand_CMD_COMMIT_FW = 22,
    ControllerCommand_CMD_SW_INHIBIT = 23,
    ControllerCommand_CMD_SW_UNINHIBIT = 24,
    ControllerCommand_CMD_HOT_WATER = 25,
    ControllerCommand_CMD_RESET_CONTROLLER = 26,
    ControllerCommand_CMD_ABORT_UPDATE = 27,
    ControllerCommand_CMD_RESET_CHUNK = 28
} ControllerCommand;
#define _ControllerCommand_MIN ControllerCommand_CMD_INVALID
#define _ControllerCommand_MAX ControllerCommand_CMD_RESET_CHUNK
#define _ControllerCommand_ARRAYSIZE ((ControllerCommand)(ControllerCommand_CMD_RESET_CHUNK+1))

typedef enum _NODE_ENUM {
    NODE_ENUM_NODE_UNKNOWN = 0,
    NODE_ENUM_NODE_TOUCH = 1,
    NODE_ENUM_NODE_CONTROLLER = 2,
    NODE_ENUM_NODE_XPRESS = 3,
    NODE_ENUM_NODE_EXTERNAL = 4
} NODE_ENUM;
#define _NODE_ENUM_MIN NODE_ENUM_NODE_UNKNOWN
#define _NODE_ENUM_MAX NODE_ENUM_NODE_EXTERNAL
#define _NODE_ENUM_ARRAYSIZE ((NODE_ENUM)(NODE_ENUM_NODE_EXTERNAL+1))

typedef enum _UICommands {
    UICommands_CMD_REPORT_STATISTIC = 0
} UICommands;
#define _UICommands_MIN UICommands_CMD_REPORT_STATISTIC
#define _UICommands_MAX UICommands_CMD_REPORT_STATISTIC
#define _UICommands_ARRAYSIZE ((UICommands)(UICommands_CMD_REPORT_STATISTIC+1))

/* Struct definitions */
typedef struct _RecordLists {
    pb_callback_t record_lists;
/* @@protoc_insertion_point(struct:RecordLists) */
} RecordLists;

typedef struct _edgeConfig {
    char dummy_field;
/* @@protoc_insertion_point(struct:edgeConfig) */
} edgeConfig;

typedef PB_BYTES_ARRAY_T(704) Binary_raw_bin_t;
typedef struct _Binary {
    Binary_raw_bin_t raw_bin;
/* @@protoc_insertion_point(struct:Binary) */
} Binary;

typedef struct _CarafeParameters {
    Size size;
    uint32_t num_large_drinks;
    uint32_t num_extra_large_drinks;
/* @@protoc_insertion_point(struct:CarafeParameters) */
} CarafeParameters;

typedef struct _CoffeeHWStatus {
    GroupMotorStatus group_mtr;
    PumpStatus pump;
    GrinderStatus grinder;
    ValvesState valve;
    SwitchStatus switches;
    ControllerPCB pcb;
/* @@protoc_insertion_point(struct:CoffeeHWStatus) */
} CoffeeHWStatus;

typedef struct _CoffeeSWStatus {
    bool CalibratedFailed;
    bool DrinkFailed;
    bool ControllerConnected;
    bool MqttServerConnected;
/* @@protoc_insertion_point(struct:CoffeeSWStatus) */
} CoffeeSWStatus;

typedef struct _EthConfig {
    char ip[17];
    char netmask[17];
    char gateway[17];
    bool dhcp;
    char ssid[100];
    char psk[100];
    bool wifi_enabled;
/* @@protoc_insertion_point(struct:EthConfig) */
} EthConfig;

typedef struct _Header {
    uint32_t header_crc;
    uint32_t body_length;
    NODE_ENUM src_node;
    NODE_ENUM dest_node;
    uint32_t sequence_num;
    uint32_t packet_num;
    uint32_t total_num;
    uint32_t body_crc;
/* @@protoc_insertion_point(struct:Header) */
} Header;

typedef struct _IOTConfig {
    char server[100];
    uint32_t port;
    char project_id[100];
    char registry[100];
    char region[100];
    bool ntp_enabled;
    char ntp_server[17];
    uint32_t ntp_port;
    bool iot_enabled;
/* @@protoc_insertion_point(struct:IOTConfig) */
} IOTConfig;

typedef struct _LogMsg {
    LOG_LEVEL level;
    NODE_ENUM node;
    char str_message[400];
    uint32_t unix_time;
/* @@protoc_insertion_point(struct:LogMsg) */
} LogMsg;

typedef struct _Order {
    uint32_t order_id;
    uint32_t recipe_id;
/* @@protoc_insertion_point(struct:Order) */
} Order;

typedef struct _Preamble {
    uint32_t packet_id_high;
    uint32_t packet_id_low;
    uint32_t header_length;
/* @@protoc_insertion_point(struct:Preamble) */
} Preamble;

typedef struct _Settings {
    float clean_ml;
    float product_ml;
    float fil;
    float nitrogen_fault_diff;
/* @@protoc_insertion_point(struct:Settings) */
} Settings;

typedef struct _SwControl {
    bool grounds_bin_bypass;
    bool hot_water_on;
/* @@protoc_insertion_point(struct:SwControl) */
} SwControl;

typedef struct _TestRoutineControl {
    bool clean_open;
    bool unused_open;
    bool cold_valve_open;
    bool drain_valve_open;
    bool dispense_valve_open;
    float pump_pwm;
    bool pump_on;
    float piston_pwm;
    bool upper_up;
    bool lower_up;
    bool upper_on;
    bool lower_on;
    bool sweep_out;
    bool sweep_on;
    GRINDERS grinder_select;
    bool grinder_on;
    bool tank_heater_on;
    bool group_heater_on;
    bool zero_upper;
    bool zero_lower;
    bool zero_grinder;
    float valve_pwm;
    float valve_freq;
/* @@protoc_insertion_point(struct:TestRoutineControl) */
} TestRoutineControl;

typedef struct _MachineSettings {
    bool has_espresso;
    bool has_milk;
    bool has_flavors;
    uint32_t num_grinders;
    uint32_t num_flavors;
    GRINDERS default_grinder;
    uint32_t default_size;
    uint32_t grinder_1_bean_id;
    uint32_t grinder_2_bean_id;
    uint32_t grinder_3_bean_id;
    uint32_t grinder_4_bean_id;
    uint32_t ui_theme_id;
    char serial_number[30];
    bool grounds_bypassed;
    uint32_t pm_period_days;
    uint32_t pm_period_drinks;
    IOTConfig iot_config;
    EthConfig eth_config;
    float bin_full_grams;
    bool dispense_hot_water;
    bool use_room;
    bool use_bold;
    char name[30];
    char size_1_name[30];
    char size_2_name[30];
    char size_3_name[30];
    char size_4_name[30];
    uint32_t num_sizes;
    char locale[30];
    char time_zone[50];
    bool carafe_enabled;
    uint32_t num_carafe_sizes;
    char carafe_size_1_name[30];
    char carafe_size_2_name[30];
    char carafe_size_3_name[30];
    bool show_caffeine;
    bool show_roast;
    bool use_low_beans;
    bool use_pressure_trans;
    OptionParameters option_params;
    pb_size_t carafe_params_count;
    CarafeParameters carafe_params[10];
    float clean_ml;
    float product_ml;
    float filter_fault_diff;
    uint32_t soak_time_s;
    uint32_t log_period_s;
    float pre_pressure_offset;
    uint32_t machine_serial_num;
    bool has_edge_ip;
    char edge_ip[50];
/* @@protoc_insertion_point(struct:MachineSettings) */
} MachineSettings;

typedef struct _MachineStatus {
    MACHINE_STATE machine_state;
    Instruction current_instruction;
    uint32_t current_recipe_id;
    Order current_order;
    Order last_order_completed;
    uint32_t recipe_status;
    uint32_t update_bytes_received;
    uint32_t bootloader_status;
    bool has_current_inst_index;
    uint32_t current_inst_index;
/* @@protoc_insertion_point(struct:MachineStatus) */
} MachineStatus;

typedef struct _CoffeeFWStatus {
    MachineStatus machine;
    BuiltInTests bits;
    bool GroundsBypassed;
    float tank_setpoint_c;
    float group_setpoint_c;
    float cold_setpoint;
    float hot_setpoint;
    float flow_rate_ml_per_sec;
/* @@protoc_insertion_point(struct:CoffeeFWStatus) */
} CoffeeFWStatus;

typedef struct _ControllerStatus {
    CoffeeHWStatus hw_status;
    CoffeeFWStatus fw_status;
    Version fw_version;
/* @@protoc_insertion_point(struct:ControllerStatus) */
} ControllerStatus;

typedef struct _Record {
    uint32_t id;
    ControllerCommand command;
    uint32_t unix_time;
    pb_size_t which_payload;
    union {
        Recipe recipe;
        XpressHWStatus xpress_status;
        ControllerStatus status;
        Version controller_version;
        Order order;
        LogMsg log_msg;
        PressureLUT pressure_lut;
        Binary binary;
        EthConfig eth_config;
        Instruction instruction;
        TestRoutineControl test_routine;
    } payload;
    uint64_t unix_time_ms;
    bool has_setpoint;
    float setpoint;
    bool has_sw_inhibit;
    bool sw_inhibit;
    bool has_dispense_on;
    bool dispense_on;
    bool has_nitro_on;
    bool nitro_on;
/* @@protoc_insertion_point(struct:Record) */
} Record;

typedef struct _Packet {
    Preamble preamble;
    Header header;
    Record record;
/* @@protoc_insertion_point(struct:Packet) */
} Packet;

typedef struct _RecordList {
    pb_size_t records_count;
    Record records[100];
/* @@protoc_insertion_point(struct:RecordList) */
} RecordList;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Preamble_init_default                    {0, 0, 0}
#define Header_init_default                      {0, 0, _NODE_ENUM_MIN, _NODE_ENUM_MIN, 0, 0, 0, 0}
#define Packet_init_default                      {Preamble_init_default, Header_init_default, Record_init_default}
#define LogMsg_init_default                      {_LOG_LEVEL_MIN, _NODE_ENUM_MIN, "", 0}
#define RecordList_init_default                  {0, {Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default, Record_init_default}}
#define RecordLists_init_default                 {{{NULL}, NULL}}
#define Record_init_default                      {0, _ControllerCommand_MIN, 0, 0, {Recipe_init_default}, 0, false, 0, false, 0, false, 0, false, 0}
#define Binary_init_default                      {{0, {0}}}
#define Order_init_default                       {0, 0}
#define EthConfig_init_default                   {"", "", "", 0, "", "", 0}
#define TestRoutineControl_init_default          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _GRINDERS_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define MachineSettings_init_default             {0, 0, 0, 0, 0, _GRINDERS_MIN, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, IOTConfig_init_default, EthConfig_init_default, 0, 0, 0, 0, "", "", "", "", "", 0, "", "", 0, 0, "", "", "", 0, 0, 0, 0, OptionParameters_init_default, 0, {CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default, CarafeParameters_init_default}, 0, 0, 0, 0, 0, 0, 0, false, ""}
#define CoffeeSWStatus_init_default              {0, 0, 0, 0}
#define CoffeeHWStatus_init_default              {GroupMotorStatus_init_default, PumpStatus_init_default, GrinderStatus_init_default, ValvesState_init_default, SwitchStatus_init_default, ControllerPCB_init_default}
#define ControllerStatus_init_default            {CoffeeHWStatus_init_default, CoffeeFWStatus_init_default, Version_init_default}
#define CoffeeFWStatus_init_default              {MachineStatus_init_default, BuiltInTests_init_default, 0, 0, 0, 0, 0, 0}
#define MachineStatus_init_default               {_MACHINE_STATE_MIN, Instruction_init_default, 0, Order_init_default, Order_init_default, 0, 0, 0, false, 0}
#define IOTConfig_init_default                   {"", 0, "", "", "", 0, "", 0, 0}
#define edgeConfig_init_default                  {0}
#define SwControl_init_default                   {0, 0}
#define CarafeParameters_init_default            {_Size_MIN, 0, 0}
#define Settings_init_default                    {0, 0, 0, 0}
#define Preamble_init_zero                       {0, 0, 0}
#define Header_init_zero                         {0, 0, _NODE_ENUM_MIN, _NODE_ENUM_MIN, 0, 0, 0, 0}
#define Packet_init_zero                         {Preamble_init_zero, Header_init_zero, Record_init_zero}
#define LogMsg_init_zero                         {_LOG_LEVEL_MIN, _NODE_ENUM_MIN, "", 0}
#define RecordList_init_zero                     {0, {Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero, Record_init_zero}}
#define RecordLists_init_zero                    {{{NULL}, NULL}}
#define Record_init_zero                         {0, _ControllerCommand_MIN, 0, 0, {Recipe_init_zero}, 0, false, 0, false, 0, false, 0, false, 0}
#define Binary_init_zero                         {{0, {0}}}
#define Order_init_zero                          {0, 0}
#define EthConfig_init_zero                      {"", "", "", 0, "", "", 0}
#define TestRoutineControl_init_zero             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _GRINDERS_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define MachineSettings_init_zero                {0, 0, 0, 0, 0, _GRINDERS_MIN, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, IOTConfig_init_zero, EthConfig_init_zero, 0, 0, 0, 0, "", "", "", "", "", 0, "", "", 0, 0, "", "", "", 0, 0, 0, 0, OptionParameters_init_zero, 0, {CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero, CarafeParameters_init_zero}, 0, 0, 0, 0, 0, 0, 0, false, ""}
#define CoffeeSWStatus_init_zero                 {0, 0, 0, 0}
#define CoffeeHWStatus_init_zero                 {GroupMotorStatus_init_zero, PumpStatus_init_zero, GrinderStatus_init_zero, ValvesState_init_zero, SwitchStatus_init_zero, ControllerPCB_init_zero}
#define ControllerStatus_init_zero               {CoffeeHWStatus_init_zero, CoffeeFWStatus_init_zero, Version_init_zero}
#define CoffeeFWStatus_init_zero                 {MachineStatus_init_zero, BuiltInTests_init_zero, 0, 0, 0, 0, 0, 0}
#define MachineStatus_init_zero                  {_MACHINE_STATE_MIN, Instruction_init_zero, 0, Order_init_zero, Order_init_zero, 0, 0, 0, false, 0}
#define IOTConfig_init_zero                      {"", 0, "", "", "", 0, "", 0, 0}
#define edgeConfig_init_zero                     {0}
#define SwControl_init_zero                      {0, 0}
#define CarafeParameters_init_zero               {_Size_MIN, 0, 0}
#define Settings_init_zero                       {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define RecordLists_record_lists_tag             1
#define Binary_raw_bin_tag                       1
#define CarafeParameters_size_tag                1
#define CarafeParameters_num_large_drinks_tag    2
#define CarafeParameters_num_extra_large_drinks_tag 3
#define CoffeeHWStatus_group_mtr_tag             1
#define CoffeeHWStatus_pump_tag                  2
#define CoffeeHWStatus_grinder_tag               3
#define CoffeeHWStatus_valve_tag                 4
#define CoffeeHWStatus_switches_tag              5
#define CoffeeHWStatus_pcb_tag                   6
#define CoffeeSWStatus_CalibratedFailed_tag      1
#define CoffeeSWStatus_DrinkFailed_tag           2
#define CoffeeSWStatus_ControllerConnected_tag   8
#define CoffeeSWStatus_MqttServerConnected_tag   9
#define EthConfig_ip_tag                         1
#define EthConfig_netmask_tag                    2
#define EthConfig_gateway_tag                    3
#define EthConfig_dhcp_tag                       4
#define EthConfig_ssid_tag                       5
#define EthConfig_psk_tag                        6
#define EthConfig_wifi_enabled_tag               7
#define Header_header_crc_tag                    1
#define Header_body_length_tag                   2
#define Header_src_node_tag                      3
#define Header_dest_node_tag                     4
#define Header_sequence_num_tag                  5
#define Header_packet_num_tag                    6
#define Header_total_num_tag                     7
#define Header_body_crc_tag                      8
#define IOTConfig_server_tag                     1
#define IOTConfig_port_tag                       2
#define IOTConfig_project_id_tag                 3
#define IOTConfig_registry_tag                   4
#define IOTConfig_region_tag                     5
#define IOTConfig_ntp_enabled_tag                6
#define IOTConfig_ntp_server_tag                 7
#define IOTConfig_ntp_port_tag                   8
#define IOTConfig_iot_enabled_tag                9
#define LogMsg_level_tag                         1
#define LogMsg_node_tag                          2
#define LogMsg_str_message_tag                   3
#define LogMsg_unix_time_tag                     4
#define Order_order_id_tag                       1
#define Order_recipe_id_tag                      2
#define Preamble_packet_id_high_tag              1
#define Preamble_packet_id_low_tag               2
#define Preamble_header_length_tag               3
#define Settings_clean_ml_tag                    1
#define Settings_product_ml_tag                  2
#define Settings_fil_tag                         3
#define Settings_nitrogen_fault_diff_tag         4
#define SwControl_grounds_bin_bypass_tag         1
#define SwControl_hot_water_on_tag               2
#define TestRoutineControl_clean_open_tag        1
#define TestRoutineControl_unused_open_tag       2
#define TestRoutineControl_cold_valve_open_tag   3
#define TestRoutineControl_drain_valve_open_tag  4
#define TestRoutineControl_dispense_valve_open_tag 5
#define TestRoutineControl_pump_pwm_tag          6
#define TestRoutineControl_pump_on_tag           7
#define TestRoutineControl_piston_pwm_tag        8
#define TestRoutineControl_upper_up_tag          9
#define TestRoutineControl_lower_up_tag          10
#define TestRoutineControl_upper_on_tag          11
#define TestRoutineControl_lower_on_tag          12
#define TestRoutineControl_sweep_out_tag         13
#define TestRoutineControl_sweep_on_tag          14
#define TestRoutineControl_grinder_select_tag    15
#define TestRoutineControl_grinder_on_tag        16
#define TestRoutineControl_tank_heater_on_tag    17
#define TestRoutineControl_group_heater_on_tag   18
#define TestRoutineControl_zero_upper_tag        19
#define TestRoutineControl_zero_lower_tag        20
#define TestRoutineControl_zero_grinder_tag      21
#define TestRoutineControl_valve_pwm_tag         22
#define TestRoutineControl_valve_freq_tag        23
#define MachineSettings_has_espresso_tag         1
#define MachineSettings_has_milk_tag             2
#define MachineSettings_has_flavors_tag          3
#define MachineSettings_num_grinders_tag         4
#define MachineSettings_num_flavors_tag          5
#define MachineSettings_default_grinder_tag      6
#define MachineSettings_default_size_tag         7
#define MachineSettings_grinder_1_bean_id_tag    8
#define MachineSettings_grinder_2_bean_id_tag    9
#define MachineSettings_grinder_3_bean_id_tag    10
#define MachineSettings_grinder_4_bean_id_tag    11
#define MachineSettings_ui_theme_id_tag          12
#define MachineSettings_serial_number_tag        13
#define MachineSettings_grounds_bypassed_tag     14
#define MachineSettings_pm_period_days_tag       15
#define MachineSettings_pm_period_drinks_tag     16
#define MachineSettings_iot_config_tag           18
#define MachineSettings_eth_config_tag           19
#define MachineSettings_bin_full_grams_tag       20
#define MachineSettings_dispense_hot_water_tag   21
#define MachineSettings_use_room_tag             22
#define MachineSettings_use_bold_tag             23
#define MachineSettings_name_tag                 24
#define MachineSettings_size_1_name_tag          25
#define MachineSettings_size_2_name_tag          26
#define MachineSettings_size_3_name_tag          27
#define MachineSettings_size_4_name_tag          28
#define MachineSettings_num_sizes_tag            29
#define MachineSettings_locale_tag               30
#define MachineSettings_time_zone_tag            31
#define MachineSettings_carafe_enabled_tag       32
#define MachineSettings_num_carafe_sizes_tag     33
#define MachineSettings_carafe_size_1_name_tag   34
#define MachineSettings_carafe_size_2_name_tag   35
#define MachineSettings_carafe_size_3_name_tag   36
#define MachineSettings_show_caffeine_tag        37
#define MachineSettings_show_roast_tag           38
#define MachineSettings_use_low_beans_tag        39
#define MachineSettings_use_pressure_trans_tag   40
#define MachineSettings_option_params_tag        41
#define MachineSettings_carafe_params_tag        42
#define MachineSettings_clean_ml_tag             43
#define MachineSettings_product_ml_tag           44
#define MachineSettings_filter_fault_diff_tag    45
#define MachineSettings_soak_time_s_tag          46
#define MachineSettings_log_period_s_tag         47
#define MachineSettings_pre_pressure_offset_tag  48
#define MachineSettings_machine_serial_num_tag   49
#define MachineSettings_edge_ip_tag              50
#define MachineStatus_machine_state_tag          1
#define MachineStatus_current_instruction_tag    2
#define MachineStatus_current_recipe_id_tag      3
#define MachineStatus_current_order_tag          4
#define MachineStatus_last_order_completed_tag   5
#define MachineStatus_recipe_status_tag          6
#define MachineStatus_update_bytes_received_tag  7
#define MachineStatus_bootloader_status_tag      8
#define MachineStatus_current_inst_index_tag     9
#define CoffeeFWStatus_machine_tag               1
#define CoffeeFWStatus_bits_tag                  2
#define CoffeeFWStatus_GroundsBypassed_tag       3
#define CoffeeFWStatus_tank_setpoint_c_tag       4
#define CoffeeFWStatus_group_setpoint_c_tag      5
#define CoffeeFWStatus_cold_setpoint_tag         6
#define CoffeeFWStatus_hot_setpoint_tag          7
#define CoffeeFWStatus_flow_rate_ml_per_sec_tag  8
#define ControllerStatus_hw_status_tag           1
#define ControllerStatus_fw_status_tag           2
#define ControllerStatus_fw_version_tag          3
#define Record_recipe_tag                        4
#define Record_xpress_status_tag                 5
#define Record_status_tag                        6
#define Record_controller_version_tag            7
#define Record_order_tag                         8
#define Record_log_msg_tag                       9
#define Record_pressure_lut_tag                  10
#define Record_binary_tag                        11
#define Record_eth_config_tag                    15
#define Record_instruction_tag                   16
#define Record_test_routine_tag                  17
#define Record_id_tag                            1
#define Record_command_tag                       2
#define Record_unix_time_tag                     3
#define Record_unix_time_ms_tag                  18
#define Record_setpoint_tag                      19
#define Record_sw_inhibit_tag                    20
#define Record_dispense_on_tag                   21
#define Record_nitro_on_tag                      22
#define Packet_preamble_tag                      1
#define Packet_header_tag                        2
#define Packet_record_tag                        3
#define RecordList_records_tag                   1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Preamble_fields[4];
extern const pb_field_t Header_fields[9];
extern const pb_field_t Packet_fields[4];
extern const pb_field_t LogMsg_fields[5];
extern const pb_field_t RecordList_fields[2];
extern const pb_field_t RecordLists_fields[2];
extern const pb_field_t Record_fields[20];
extern const pb_field_t Binary_fields[2];
extern const pb_field_t Order_fields[3];
extern const pb_field_t EthConfig_fields[8];
extern const pb_field_t TestRoutineControl_fields[24];
extern const pb_field_t MachineSettings_fields[50];
extern const pb_field_t CoffeeSWStatus_fields[5];
extern const pb_field_t CoffeeHWStatus_fields[7];
extern const pb_field_t ControllerStatus_fields[4];
extern const pb_field_t CoffeeFWStatus_fields[9];
extern const pb_field_t MachineStatus_fields[10];
extern const pb_field_t IOTConfig_fields[10];
extern const pb_field_t edgeConfig_fields[1];
extern const pb_field_t SwControl_fields[3];
extern const pb_field_t CarafeParameters_fields[4];
extern const pb_field_t Settings_fields[5];

/* Maximum encoded size of messages (where known) */
#define Preamble_size                            18
#define Header_size                              40
#define Packet_size                              (114 + sizeof(union{char f0[710]; char f4[Recipe_size]; char f5[XpressHWStatus_size]; char f6[GroupMotorStatus_size]; char f7[Version_size]; char f10[PressureLUT_size]; char f16[Instruction_size];}))
#define LogMsg_size                              413
#define RecordList_size                          (5200 + 100*sizeof(union{char f0[710]; char f4[Recipe_size]; char f5[XpressHWStatus_size]; char f6[GroupMotorStatus_size]; char f7[Version_size]; char f10[PressureLUT_size]; char f16[Instruction_size];}))
/* RecordLists_size depends on runtime parameters */
#define Record_size                              (46 + sizeof(union{char f0[710]; char f4[Recipe_size]; char f5[XpressHWStatus_size]; char f6[GroupMotorStatus_size]; char f7[Version_size]; char f10[PressureLUT_size]; char f16[Instruction_size];}))
#define Binary_size                              707
#define Order_size                               12
#define EthConfig_size                           265
#define TestRoutineControl_size                  75
#define MachineSettings_size                     (1587 + OptionParameters_size)
#define CoffeeSWStatus_size                      8
#define CoffeeHWStatus_size                      (36 + GroupMotorStatus_size + PumpStatus_size + GrinderStatus_size + ValvesState_size + SwitchStatus_size + ControllerPCB_size)
#define ControllerStatus_size                    (168 + GroupMotorStatus_size + PumpStatus_size + GrinderStatus_size + ValvesState_size + SwitchStatus_size + ControllerPCB_size + Instruction_size + BuiltInTests_size + Version_size)
#define CoffeeFWStatus_size                      (114 + Instruction_size + BuiltInTests_size)
#define MachineStatus_size                       (75 + Instruction_size)
#define IOTConfig_size                           443
#define edgeConfig_size                          0
#define SwControl_size                           4
#define CarafeParameters_size                    23
#define Settings_size                            20

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define RECORD_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
