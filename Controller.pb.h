/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Mon Aug 12 12:03:43 2019. */

#ifndef PB_CONTROLLER_PB_H_INCLUDED
#define PB_CONTROLLER_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MOTOR_POSITIONS {
    MOTOR_POSITIONS_SOFT_LIMIT_UP = 0,
    MOTOR_POSITIONS_SOFT_LIMIT_DOWN = 1,
    MOTOR_POSITIONS_HARD_LIMIT_UP = 2,
    MOTOR_POSITIONS_HARD_LIMIT_DOWN = 4,
    MOTOR_POSITIONS_HOME = 5
} MOTOR_POSITIONS;
#define _MOTOR_POSITIONS_MIN MOTOR_POSITIONS_SOFT_LIMIT_UP
#define _MOTOR_POSITIONS_MAX MOTOR_POSITIONS_HOME
#define _MOTOR_POSITIONS_ARRAYSIZE ((MOTOR_POSITIONS)(MOTOR_POSITIONS_HOME+1))

typedef enum _PISTON_DRIVE_MODE {
    PISTON_DRIVE_MODE_CONSTANT = 0,
    PISTON_DRIVE_MODE_PID = 1,
    PISTON_DRIVE_MODE_NUM_DRIVE_MODES = 2
} PISTON_DRIVE_MODE;
#define _PISTON_DRIVE_MODE_MIN PISTON_DRIVE_MODE_CONSTANT
#define _PISTON_DRIVE_MODE_MAX PISTON_DRIVE_MODE_NUM_DRIVE_MODES
#define _PISTON_DRIVE_MODE_ARRAYSIZE ((PISTON_DRIVE_MODE)(PISTON_DRIVE_MODE_NUM_DRIVE_MODES+1))

typedef enum _PISTON_MOTORS {
    PISTON_MOTORS_PISTON_UPPER = 0,
    PISTON_MOTORS_PISTON_LOWER = 1,
    PISTON_MOTORS_NUM_PISTON_MOTORS = 2
} PISTON_MOTORS;
#define _PISTON_MOTORS_MIN PISTON_MOTORS_PISTON_UPPER
#define _PISTON_MOTORS_MAX PISTON_MOTORS_NUM_PISTON_MOTORS
#define _PISTON_MOTORS_ARRAYSIZE ((PISTON_MOTORS)(PISTON_MOTORS_NUM_PISTON_MOTORS+1))

typedef enum _PISTON_DIRECTION {
    PISTON_DIRECTION_PISTON_UP = 0,
    PISTON_DIRECTION_PISTON_DOWN = 1
} PISTON_DIRECTION;
#define _PISTON_DIRECTION_MIN PISTON_DIRECTION_PISTON_UP
#define _PISTON_DIRECTION_MAX PISTON_DIRECTION_PISTON_DOWN
#define _PISTON_DIRECTION_ARRAYSIZE ((PISTON_DIRECTION)(PISTON_DIRECTION_PISTON_DOWN+1))

typedef enum _SWEEP {
    SWEEP_UNCAL = 0,
    SWEEP_MOVING_IN = 2,
    SWEEP_MOVING_OUT = 3,
    SWEEP_AT_OUT = 4,
    SWEEP_AT_IN = 5,
    SWEEP_SWEEP_FAULT = 6
} SWEEP;
#define _SWEEP_MIN SWEEP_UNCAL
#define _SWEEP_MAX SWEEP_SWEEP_FAULT
#define _SWEEP_ARRAYSIZE ((SWEEP)(SWEEP_SWEEP_FAULT+1))

typedef enum _EVENT_TYPE {
    EVENT_TYPE_LOG = 0,
    EVENT_TYPE_INSTRUCTION = 1,
    EVENT_TYPE_RECIPE = 2
} EVENT_TYPE;
#define _EVENT_TYPE_MIN EVENT_TYPE_LOG
#define _EVENT_TYPE_MAX EVENT_TYPE_RECIPE
#define _EVENT_TYPE_ARRAYSIZE ((EVENT_TYPE)(EVENT_TYPE_RECIPE+1))

typedef enum _VALVES {
    VALVES_VALVE_CLEAN = 0,
    VALVES_VALVE_DISPENSE = 1,
    VALVES_VALVE_UNUSED = 2,
    VALVES_VALVE_HOT = 3,
    VALVES_VALVE_COLD = 4
} VALVES;
#define _VALVES_MIN VALVES_VALVE_CLEAN
#define _VALVES_MAX VALVES_VALVE_COLD
#define _VALVES_ARRAYSIZE ((VALVES)(VALVES_VALVE_COLD+1))

typedef enum _GRINDERS {
    GRINDERS_GRINDER_0 = 0,
    GRINDERS_GRINDER_1 = 1,
    GRINDERS_GRINDER_2 = 2,
    GRINDERS_GRINDER_3 = 3
} GRINDERS;
#define _GRINDERS_MIN GRINDERS_GRINDER_0
#define _GRINDERS_MAX GRINDERS_GRINDER_3
#define _GRINDERS_ARRAYSIZE ((GRINDERS)(GRINDERS_GRINDER_3+1))

typedef enum _SWITCHES {
    SWITCHES_FRONT_PANEL = 0,
    SWITCHES_SERVICE_MODE = 1,
    SWITCHES_GROUND_BIN_OUT = 2
} SWITCHES;
#define _SWITCHES_MIN SWITCHES_FRONT_PANEL
#define _SWITCHES_MAX SWITCHES_GROUND_BIN_OUT
#define _SWITCHES_ARRAYSIZE ((SWITCHES)(SWITCHES_GROUND_BIN_OUT+1))

typedef enum _PUMP_STATE {
    PUMP_STATE_PUMP_INHIBIT = 0,
    PUMP_STATE_PUMP_ON = 1,
    PUMP_STATE_PUMP_OFF = 2
} PUMP_STATE;
#define _PUMP_STATE_MIN PUMP_STATE_PUMP_INHIBIT
#define _PUMP_STATE_MAX PUMP_STATE_PUMP_OFF
#define _PUMP_STATE_ARRAYSIZE ((PUMP_STATE)(PUMP_STATE_PUMP_OFF+1))

typedef enum _VALVE_STATE {
    VALVE_STATE_VALVE_INHIBIT = 0,
    VALVE_STATE_VALVE_OPEN = 1,
    VALVE_STATE_VALVE_CLOSED = 2
} VALVE_STATE;
#define _VALVE_STATE_MIN VALVE_STATE_VALVE_INHIBIT
#define _VALVE_STATE_MAX VALVE_STATE_VALVE_CLOSED
#define _VALVE_STATE_ARRAYSIZE ((VALVE_STATE)(VALVE_STATE_VALVE_CLOSED+1))

typedef enum _MACHINE_STATE {
    MACHINE_STATE_BOOTUP = 0,
    MACHINE_STATE_READY = 1,
    MACHINE_STATE_EXECUTING = 2,
    MACHINE_STATE_UPDATE_READY = 3,
    MACHINE_STATE_UPDATE_BUSY = 4,
    MACHINE_STATE_TEST_ROUTINE = 5,
    MACHINE_STATE_FAULTED = 6,
    MACHINE_STATE_RESETTING = 7
} MACHINE_STATE;
#define _MACHINE_STATE_MIN MACHINE_STATE_BOOTUP
#define _MACHINE_STATE_MAX MACHINE_STATE_RESETTING
#define _MACHINE_STATE_ARRAYSIZE ((MACHINE_STATE)(MACHINE_STATE_RESETTING+1))

typedef enum _BOOTUP_STATE {
    BOOTUP_STATE_HW_INIT = 0,
    BOOTUP_STATE_HW_BOOT_TEST = 1,
    BOOTUP_STATE_SW_INIT = 2,
    BOOTUP_STATE_SW_TEST = 3,
    BOOTUP_STATE_BOOTUP_FAILED = 4,
    BOOTUP_STATE_BOOTUP_SUCCESS = 5
} BOOTUP_STATE;
#define _BOOTUP_STATE_MIN BOOTUP_STATE_HW_INIT
#define _BOOTUP_STATE_MAX BOOTUP_STATE_BOOTUP_SUCCESS
#define _BOOTUP_STATE_ARRAYSIZE ((BOOTUP_STATE)(BOOTUP_STATE_BOOTUP_SUCCESS+1))

typedef enum _WARMUP_STATE {
    WARMUP_STATE_WARMING_UP = 0,
    WARMUP_STATE_WARMUP_FAILED = 1,
    WARMUP_STATE_WARMUP_SUCCESS = 2
} WARMUP_STATE;
#define _WARMUP_STATE_MIN WARMUP_STATE_WARMING_UP
#define _WARMUP_STATE_MAX WARMUP_STATE_WARMUP_SUCCESS
#define _WARMUP_STATE_ARRAYSIZE ((WARMUP_STATE)(WARMUP_STATE_WARMUP_SUCCESS+1))

typedef enum _DRINK_STATE {
    DRINK_STATE_DRINK_IDLE = 0,
    DRINK_STATE_DRINK_BUSY = 1,
    DRINK_STATE_DRINK_FAILED = 2,
    DRINK_STATE_DRINK_SUCCESS = 3,
    DRINK_STATE_DRINK_CANCELLED = 4
} DRINK_STATE;
#define _DRINK_STATE_MIN DRINK_STATE_DRINK_IDLE
#define _DRINK_STATE_MAX DRINK_STATE_DRINK_CANCELLED
#define _DRINK_STATE_ARRAYSIZE ((DRINK_STATE)(DRINK_STATE_DRINK_CANCELLED+1))

typedef enum _UPDATE_STATE {
    UPDATE_STATE_UPDATE_IDLE = 0,
    UPDATE_STATE_GET_READY = 1,
    UPDATE_STATE_WAIT_FOR_DATA = 2,
    UPDATE_STATE_WRITE_CHUNK = 3,
    UPDATE_STATE_COMMIT = 4,
    UPDATE_STATE_REVERT = 5,
    UPDATE_STATE_UPDATE_FAILED = 6,
    UPDATE_STATE_UPDATE_SUCCESS = 7,
    UPDATE_STATE_WAIT_TIMEOUT = 8
} UPDATE_STATE;
#define _UPDATE_STATE_MIN UPDATE_STATE_UPDATE_IDLE
#define _UPDATE_STATE_MAX UPDATE_STATE_WAIT_TIMEOUT
#define _UPDATE_STATE_ARRAYSIZE ((UPDATE_STATE)(UPDATE_STATE_WAIT_TIMEOUT+1))

/* Struct definitions */
typedef struct _BuiltInTests {
    bool invalid_recipe_file;
    bool node_3_3_voltage_fault;
    bool invalid_update;
    bool internal_flash_fault;
    bool eeprom_fault;
    bool valve_feedback_fault;
    bool invalid_recipe_id;
    bool node_5_voltage_fault;
    bool node_24_voltage_fault;
    bool water_level_low;
    bool water_temp_fault;
    bool pump_overcurrent_fault;
    bool brew_feedback_fault;
    bool clean_feedback_fault;
    bool hot_feedback_fault;
    bool drain_feedback_fault;
    bool dispense_feedback_fault;
    bool water_pressure_low;
    bool low_hot_flow;
    bool low_cold_flow;
    bool tank_fill_timeout;
    bool tank_warm_timeout;
    bool grinder_0_low_beans;
    bool grinder_1_low_beans;
    bool grinder_2_low_beans;
    bool grinder_3_low_beans;
    bool grinder_0_low_speed;
    bool grinder_1_low_speed;
    bool grinder_2_low_speed;
    bool grinder_3_low_speed;
    bool upper_piston_ic_fault;
    bool lower_piston_ic_fault;
    bool upper_piston_overcurrent;
    bool lower_piston_overcurrent;
    bool lower_uncalibrated;
    bool sweep_uncalibrated;
    bool sweep_ic_fault;
    bool group_temp_fault;
    bool upper_uncalibrated;
    bool lower_drive_timeout;
    bool upper_drive_timeout;
    bool upper_drive_failed;
    bool lower_drive_failed;
    bool group_warm_timeout;
    bool hw_inhibited;
    bool sw_inhibited;
    bool recipe_failed;
    bool update_failed;
    bool recipe_cancelled;
/* @@protoc_insertion_point(struct:BuiltInTests) */
} BuiltInTests;

typedef struct _ControllerPCB {
    float node_3_3;
    float node_5;
    float node_24;
    float pcb_temp;
    bool has_input_vac;
    float input_vac;
/* @@protoc_insertion_point(struct:ControllerPCB) */
} ControllerPCB;

typedef struct _DrinkStatus {
    uint32_t extraction_time_ms;
/* @@protoc_insertion_point(struct:DrinkStatus) */
} DrinkStatus;

typedef struct _Event {
    uint32_t unix_time;
    uint32_t sub_seconds;
    EVENT_TYPE type;
    uint32_t event_id;
/* @@protoc_insertion_point(struct:Event) */
} Event;

typedef struct _GrinderStatus {
    uint32_t grind_encoder_count;
/* @@protoc_insertion_point(struct:GrinderStatus) */
} GrinderStatus;

typedef struct _GroupMotorStatus {
    float upper_piston_ma;
    float upper_piston_position;
    float lower_piston_ma;
    float lower_piston_position;
    float temperature;
/* @@protoc_insertion_point(struct:GroupMotorStatus) */
} GroupMotorStatus;

typedef struct _PumpStatus {
    float pre_pressure_psi;
    float nozzle_pressure_psi;
    float nitro_water_ml;
    float tank_temp_c;
    float post_pressure_psi;
/* @@protoc_insertion_point(struct:PumpStatus) */
} PumpStatus;

typedef struct _SwitchStatus {
    bool front_panel_open;
    bool service_mode;
    bool ground_bin_out;
/* @@protoc_insertion_point(struct:SwitchStatus) */
} SwitchStatus;

typedef struct _ValvesState {
    bool clean_open;
    bool dispense_open;
    bool unused_open;
    bool hot_water_open;
    bool cold_water_open;
/* @@protoc_insertion_point(struct:ValvesState) */
} ValvesState;

typedef struct _Version {
    uint32_t major;
    uint32_t minor;
    uint32_t build_num;
    char date[15];
    char time[15];
/* @@protoc_insertion_point(struct:Version) */
} Version;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Version_init_default                     {0, 0, 0, "", ""}
#define Event_init_default                       {0, 0, _EVENT_TYPE_MIN, 0}
#define DrinkStatus_init_default                 {0}
#define GroupMotorStatus_init_default            {0, 0, 0, 0, 0}
#define PumpStatus_init_default                  {0, 0, 0, 0, 0}
#define GrinderStatus_init_default               {0}
#define ValvesState_init_default                 {0, 0, 0, 0, 0}
#define SwitchStatus_init_default                {0, 0, 0}
#define ControllerPCB_init_default               {0, 0, 0, 0, false, 0}
#define BuiltInTests_init_default                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Version_init_zero                        {0, 0, 0, "", ""}
#define Event_init_zero                          {0, 0, _EVENT_TYPE_MIN, 0}
#define DrinkStatus_init_zero                    {0}
#define GroupMotorStatus_init_zero               {0, 0, 0, 0, 0}
#define PumpStatus_init_zero                     {0, 0, 0, 0, 0}
#define GrinderStatus_init_zero                  {0}
#define ValvesState_init_zero                    {0, 0, 0, 0, 0}
#define SwitchStatus_init_zero                   {0, 0, 0}
#define ControllerPCB_init_zero                  {0, 0, 0, 0, false, 0}
#define BuiltInTests_init_zero                   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BuiltInTests_invalid_recipe_file_tag     1
#define BuiltInTests_node_3_3_voltage_fault_tag  2
#define BuiltInTests_invalid_update_tag          3
#define BuiltInTests_internal_flash_fault_tag    4
#define BuiltInTests_eeprom_fault_tag            5
#define BuiltInTests_valve_feedback_fault_tag    6
#define BuiltInTests_invalid_recipe_id_tag       7
#define BuiltInTests_node_5_voltage_fault_tag    8
#define BuiltInTests_node_24_voltage_fault_tag   9
#define BuiltInTests_water_level_low_tag         40
#define BuiltInTests_water_temp_fault_tag        41
#define BuiltInTests_pump_overcurrent_fault_tag  42
#define BuiltInTests_brew_feedback_fault_tag     43
#define BuiltInTests_clean_feedback_fault_tag    44
#define BuiltInTests_hot_feedback_fault_tag      45
#define BuiltInTests_drain_feedback_fault_tag    46
#define BuiltInTests_dispense_feedback_fault_tag 47
#define BuiltInTests_water_pressure_low_tag      48
#define BuiltInTests_low_hot_flow_tag            49
#define BuiltInTests_low_cold_flow_tag           50
#define BuiltInTests_tank_fill_timeout_tag       51
#define BuiltInTests_tank_warm_timeout_tag       52
#define BuiltInTests_grinder_0_low_beans_tag     80
#define BuiltInTests_grinder_1_low_beans_tag     81
#define BuiltInTests_grinder_2_low_beans_tag     82
#define BuiltInTests_grinder_3_low_beans_tag     83
#define BuiltInTests_grinder_0_low_speed_tag     84
#define BuiltInTests_grinder_1_low_speed_tag     85
#define BuiltInTests_grinder_2_low_speed_tag     86
#define BuiltInTests_grinder_3_low_speed_tag     87
#define BuiltInTests_upper_piston_ic_fault_tag   120
#define BuiltInTests_lower_piston_ic_fault_tag   121
#define BuiltInTests_upper_piston_overcurrent_tag 122
#define BuiltInTests_lower_piston_overcurrent_tag 123
#define BuiltInTests_lower_uncalibrated_tag      124
#define BuiltInTests_sweep_uncalibrated_tag      125
#define BuiltInTests_sweep_ic_fault_tag          126
#define BuiltInTests_group_temp_fault_tag        127
#define BuiltInTests_upper_uncalibrated_tag      128
#define BuiltInTests_lower_drive_timeout_tag     129
#define BuiltInTests_upper_drive_timeout_tag     130
#define BuiltInTests_upper_drive_failed_tag      131
#define BuiltInTests_lower_drive_failed_tag      132
#define BuiltInTests_group_warm_timeout_tag      133
#define BuiltInTests_hw_inhibited_tag            160
#define BuiltInTests_sw_inhibited_tag            161
#define BuiltInTests_recipe_failed_tag           200
#define BuiltInTests_update_failed_tag           201
#define BuiltInTests_recipe_cancelled_tag        202
#define ControllerPCB_node_3_3_tag               1
#define ControllerPCB_node_5_tag                 2
#define ControllerPCB_node_24_tag                3
#define ControllerPCB_pcb_temp_tag               4
#define ControllerPCB_input_vac_tag              5
#define DrinkStatus_extraction_time_ms_tag       1
#define Event_unix_time_tag                      1
#define Event_sub_seconds_tag                    2
#define Event_type_tag                           3
#define Event_event_id_tag                       4
#define GrinderStatus_grind_encoder_count_tag    8
#define GroupMotorStatus_upper_piston_ma_tag     1
#define GroupMotorStatus_upper_piston_position_tag 2
#define GroupMotorStatus_lower_piston_ma_tag     3
#define GroupMotorStatus_lower_piston_position_tag 4
#define GroupMotorStatus_temperature_tag         5
#define PumpStatus_pre_pressure_psi_tag          1
#define PumpStatus_nozzle_pressure_psi_tag       2
#define PumpStatus_nitro_water_ml_tag            3
#define PumpStatus_tank_temp_c_tag               4
#define PumpStatus_post_pressure_psi_tag         5
#define SwitchStatus_front_panel_open_tag        1
#define SwitchStatus_service_mode_tag            2
#define SwitchStatus_ground_bin_out_tag          3
#define ValvesState_clean_open_tag               1
#define ValvesState_dispense_open_tag            2
#define ValvesState_unused_open_tag              3
#define ValvesState_hot_water_open_tag           4
#define ValvesState_cold_water_open_tag          5
#define Version_major_tag                        1
#define Version_minor_tag                        2
#define Version_build_num_tag                    3
#define Version_date_tag                         4
#define Version_time_tag                         5

/* Struct field encoding specification for nanopb */
extern const pb_field_t Version_fields[6];
extern const pb_field_t Event_fields[5];
extern const pb_field_t DrinkStatus_fields[2];
extern const pb_field_t GroupMotorStatus_fields[6];
extern const pb_field_t PumpStatus_fields[6];
extern const pb_field_t GrinderStatus_fields[2];
extern const pb_field_t ValvesState_fields[6];
extern const pb_field_t SwitchStatus_fields[4];
extern const pb_field_t ControllerPCB_fields[6];
extern const pb_field_t BuiltInTests_fields[50];

/* Maximum encoded size of messages (where known) */
#define Version_size                             52
#define Event_size                               20
#define DrinkStatus_size                         6
#define GroupMotorStatus_size                    25
#define PumpStatus_size                          25
#define GrinderStatus_size                       6
#define ValvesState_size                         10
#define SwitchStatus_size                        6
#define ControllerPCB_size                       25
#define BuiltInTests_size                        138

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONTROLLER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
